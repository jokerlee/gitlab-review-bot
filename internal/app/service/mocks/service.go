// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ds "github.com/jokerlee/gitlab-review-bot/internal/app/ds"
)

// Repository is a mock of Repository interface.
type Repository struct {
	ctrl     *gomock.Controller
	recorder *RepositoryMockRecorder
}

// RepositoryMockRecorder is the mock recorder for Repository.
type RepositoryMockRecorder struct {
	mock *Repository
}

// NewRepository creates a new mock instance.
func NewRepository(ctrl *gomock.Controller) *Repository {
	mock := &Repository{ctrl: ctrl}
	mock.recorder = &RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Repository) EXPECT() *RepositoryMockRecorder {
	return m.recorder
}

// MergeRequestByID mocks base method.
func (m *Repository) MergeRequestByID(id int) (*ds.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestByID", id)
	ret0, _ := ret[0].(*ds.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestByID indicates an expected call of MergeRequestByID.
func (mr *RepositoryMockRecorder) MergeRequestByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestByID", reflect.TypeOf((*Repository)(nil).MergeRequestByID), id)
}

// MergeRequestsByAuthor mocks base method.
func (m *Repository) MergeRequestsByAuthor(authorID []int) ([]*ds.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestsByAuthor", authorID)
	ret0, _ := ret[0].([]*ds.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestsByAuthor indicates an expected call of MergeRequestsByAuthor.
func (mr *RepositoryMockRecorder) MergeRequestsByAuthor(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByAuthor", reflect.TypeOf((*Repository)(nil).MergeRequestsByAuthor), authorID)
}

// MergeRequestsByProject mocks base method.
func (m *Repository) MergeRequestsByProject(projectID int) ([]*ds.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestsByProject", projectID)
	ret0, _ := ret[0].([]*ds.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestsByProject indicates an expected call of MergeRequestsByProject.
func (mr *RepositoryMockRecorder) MergeRequestsByProject(projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByProject", reflect.TypeOf((*Repository)(nil).MergeRequestsByProject), projectID)
}

// MergeRequestsByReviewer mocks base method.
func (m *Repository) MergeRequestsByReviewer(reviewerID []int) ([]*ds.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestsByReviewer", reviewerID)
	ret0, _ := ret[0].([]*ds.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestsByReviewer indicates an expected call of MergeRequestsByReviewer.
func (mr *RepositoryMockRecorder) MergeRequestsByReviewer(reviewerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByReviewer", reflect.TypeOf((*Repository)(nil).MergeRequestsByReviewer), reviewerID)
}

// Projects mocks base method.
func (m *Repository) Projects() ([]*ds.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Projects")
	ret0, _ := ret[0].([]*ds.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Projects indicates an expected call of Projects.
func (mr *RepositoryMockRecorder) Projects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Projects", reflect.TypeOf((*Repository)(nil).Projects))
}

// Teams mocks base method.
func (m *Repository) Teams() ([]*ds.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teams")
	ret0, _ := ret[0].([]*ds.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teams indicates an expected call of Teams.
func (mr *RepositoryMockRecorder) Teams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teams", reflect.TypeOf((*Repository)(nil).Teams))
}

// UpsertMergeRequest mocks base method.
func (m *Repository) UpsertMergeRequest(mr *ds.MergeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMergeRequest", mr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMergeRequest indicates an expected call of UpsertMergeRequest.
func (mr_2 *RepositoryMockRecorder) UpsertMergeRequest(mr interface{}) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "UpsertMergeRequest", reflect.TypeOf((*Repository)(nil).UpsertMergeRequest), mr)
}

// UserBySlackID mocks base method.
func (m *Repository) UserBySlackID(slackID string) (*ds.User, *ds.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBySlackID", slackID)
	ret0, _ := ret[0].(*ds.User)
	ret1, _ := ret[1].(*ds.Team)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserBySlackID indicates an expected call of UserBySlackID.
func (mr *RepositoryMockRecorder) UserBySlackID(slackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBySlackID", reflect.TypeOf((*Repository)(nil).UserBySlackID), slackID)
}

// GitlabClient is a mock of GitlabClient interface.
type GitlabClient struct {
	ctrl     *gomock.Controller
	recorder *GitlabClientMockRecorder
}

// GitlabClientMockRecorder is the mock recorder for GitlabClient.
type GitlabClientMockRecorder struct {
	mock *GitlabClient
}

// NewGitlabClient creates a new mock instance.
func NewGitlabClient(ctrl *gomock.Controller) *GitlabClient {
	mock := &GitlabClient{ctrl: ctrl}
	mock.recorder = &GitlabClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GitlabClient) EXPECT() *GitlabClientMockRecorder {
	return m.recorder
}

// MergeRequestApproves mocks base method.
func (m *GitlabClient) MergeRequestApproves(projectID, iid int) ([]*ds.BasicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestApproves", projectID, iid)
	ret0, _ := ret[0].([]*ds.BasicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestApproves indicates an expected call of MergeRequestApproves.
func (mr *GitlabClientMockRecorder) MergeRequestApproves(projectID, iid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestApproves", reflect.TypeOf((*GitlabClient)(nil).MergeRequestApproves), projectID, iid)
}

// MergeRequestsByProject mocks base method.
func (m *GitlabClient) MergeRequestsByProject(projectID int, createdAfter time.Time) ([]*ds.MergeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeRequestsByProject", projectID, createdAfter)
	ret0, _ := ret[0].([]*ds.MergeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeRequestsByProject indicates an expected call of MergeRequestsByProject.
func (mr *GitlabClientMockRecorder) MergeRequestsByProject(projectID, createdAfter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeRequestsByProject", reflect.TypeOf((*GitlabClient)(nil).MergeRequestsByProject), projectID, createdAfter)
}

// SlackClient is a mock of SlackClient interface.
type SlackClient struct {
	ctrl     *gomock.Controller
	recorder *SlackClientMockRecorder
}

// SlackClientMockRecorder is the mock recorder for SlackClient.
type SlackClientMockRecorder struct {
	mock *SlackClient
}

// NewSlackClient creates a new mock instance.
func NewSlackClient(ctrl *gomock.Controller) *SlackClient {
	mock := &SlackClient{ctrl: ctrl}
	mock.recorder = &SlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SlackClient) EXPECT() *SlackClientMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *SlackClient) SendMessage(recipientID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", recipientID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *SlackClientMockRecorder) SendMessage(recipientID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*SlackClient)(nil).SendMessage), recipientID, message)
}

// Subscribe mocks base method.
func (m *SlackClient) Subscribe() (chan ds.UserEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(chan ds.UserEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *SlackClientMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*SlackClient)(nil).Subscribe))
}

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWorker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockWorkerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWorker)(nil).Close))
}

// Run mocks base method.
func (m *MockWorker) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockWorkerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorker)(nil).Run))
}

// Policy is a mock of Policy interface.
type Policy struct {
	ctrl     *gomock.Controller
	recorder *PolicyMockRecorder
}

// PolicyMockRecorder is the mock recorder for Policy.
type PolicyMockRecorder struct {
	mock *Policy
}

// NewPolicy creates a new mock instance.
func NewPolicy(ctrl *gomock.Controller) *Policy {
	mock := &Policy{ctrl: ctrl}
	mock.recorder = &PolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Policy) EXPECT() *PolicyMockRecorder {
	return m.recorder
}

// ApprovedByPolicy mocks base method.
func (m *Policy) ApprovedByPolicy(team *ds.Team, mr *ds.MergeRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovedByPolicy", team, mr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ApprovedByPolicy indicates an expected call of ApprovedByPolicy.
func (mr_2 *PolicyMockRecorder) ApprovedByPolicy(team, mr interface{}) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "ApprovedByPolicy", reflect.TypeOf((*Policy)(nil).ApprovedByPolicy), team, mr)
}

// ApprovedByUser mocks base method.
func (m *Policy) ApprovedByUser(team *ds.Team, mr *ds.MergeRequest, byAll ...*ds.BasicUser) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{team, mr}
	for _, a := range byAll {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApprovedByUser", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ApprovedByUser indicates an expected call of ApprovedByUser.
func (mr_2 *PolicyMockRecorder) ApprovedByUser(team, mr interface{}, byAll ...interface{}) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	varargs := append([]interface{}{team, mr}, byAll...)
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "ApprovedByUser", reflect.TypeOf((*Policy)(nil).ApprovedByUser), varargs...)
}

// ProcessChanges mocks base method.
func (m *Policy) ProcessChanges(team *ds.Team, mr *ds.MergeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessChanges", team, mr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessChanges indicates an expected call of ProcessChanges.
func (mr_2 *PolicyMockRecorder) ProcessChanges(team, mr interface{}) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "ProcessChanges", reflect.TypeOf((*Policy)(nil).ProcessChanges), team, mr)
}
